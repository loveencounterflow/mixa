{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MIXA'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n@types                    = require './types'\n{ isa\n  validate\n  validate_optional\n  cast\n  type_of }               = @types.export()\n# CP                        = require 'child_process'\n# defer                     = setImmediate\nparse_argv                = require 'command-line-args'\nmisfit                    = Symbol 'misfit'\n# relpath                   = PATH.relative process.cwd(), __filename\n{ freeze\n  lets }                  = require 'letsfreezethat'\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\npluck = ( d, name, fallback = misfit ) ->\n  R = d[ name ]\n  delete d[ name ]\n  unless R?\n    return fallback unless fallback is misfit\n    throw new Error \"^cli@5477^ no such attribute: #{rpr name}\"\n  return R\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@_compile_settings = ( settings ) ->\n  meta      = []\n  internals = []\n  externals = []\n  R         = { meta, internals, externals, }\n  usr       = { meta: ( settings?.meta ? null ), commands: ( settings?.commands ? null ), }\n  #.........................................................................................................\n  for name, description of Object.assign {}, defaults.meta, usr.meta\n    throw Error \"^cli@5587^ must not have attribute name, got #{rpr description}\" if description.name?\n    meta.push lets description, ( d ) -> d.name = name\n  #.........................................................................................................\n  for name, description of Object.assign {}, defaults.commands, usr.commands\n    throw Error \"^cli@5588^ must not have attribute name, got #{rpr description}\" if description.name?\n    is_external = false\n    e = lets description, ( d ) ->\n      d.name      = name\n      is_external = pluck d, 'external', false\n    if is_external then externals.push e\n    else                internals.push e\n  #.........................................................................................................\n  return freeze R\n\n#-----------------------------------------------------------------------------------------------------------\ndefaults = freeze {\n  meta:\n    help:   { alias: 'h', type: Boolean, description: \"show help and exit\", }\n    cd:     { alias: 'd', type: String,  description: \"change to directory before running command\", }\n  commands:\n    help:     { description: \"show help and exit\", }\n    'cats!':\n      description: \"draw a cat\"\n      flags:\n        color:  { alias: 'c', type: Boolean, description: \"whether to use color\", }\n    version:  { description: \"show project version and exit\", }\n  }\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@_signal = ( R, run, exit_code = null, message = null ) ->\n  validate.nonempty_text          run\n  validate_optional.integer       exit_code\n  validate_optional.nonempty_text message\n  R.run       = run\n  R.exit_code = exit_code\n  R.message   = message\n  return R\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@parse = ( settings, argv = null ) ->\n  validate.mixa_settings settings\n  return freeze @_parse ( @_compile_settings settings ), argv\n\n#-----------------------------------------------------------------------------------------------------------\n@_parse = ( me, argv = null ) ->\n  #---------------------------------------------------------------------------------------------------------\n  q =\n    help:         false # place under `meta`\n    testing:      argv? # place under `meta`\n    stage:        null\n  R =\n    exit_code:    null\n    message:      null\n    cd:           null\n    cmd:          null\n    parameters:   {}\n  #---------------------------------------------------------------------------------------------------------\n  # Stage: Metaflags\n  #.........................................................................................................\n  q.stage = 'meta'\n  argv    = argv ? process.argv\n  d       = me.meta\n  s       = { argv, stopAtFirstUnknown: true, }\n  p       = parse_argv d, s\n  argv    = pluck p, '_unknown', []\n  q.help  = pluck p, 'help',  false\n  if p.hasOwnProperty 'cd'\n    return @_signal R, 'help_and_exit', 12, \"^mixa@12^ must give target directory when using --dd, -d\" unless p.cd?\n    R.cd = pluck p, 'cd', null\n  return @_signal R, 'help_and_exit', 0 if q.help\n  return @_signal R, 'help_and_exit', 10, \"^mixa@10^ extraneous flag #{rpr flag}\" if ( flag = argv[ 0 ] )?.startsWith '-'\n  #---------------------------------------------------------------------------------------------------------\n  # Stage: Internal Commands\n  # Internal commands must parse their specific flags and other arguments.\n  #.........................................................................................................\n  q.stage = 'internal'\n  d       = { name: 'cmd', defaultOption: true, }\n  p       = parse_argv d, { argv, stopAtFirstUnknown: true, }\n  q.cmd   = pluck p, 'cmd', null\n  argv    = pluck p, '_unknown', []\n  return @_signal R, 'help_and_exit', 11, \"^mixa@11^ missing command\" unless q.cmd?\n  #.........................................................................................................\n  switch q.cmd\n    when 'help'\n      d                   = me.internals.help\n      p                   = parse_argv d, { argv, stopAtFirstUnknown: true, }\n      R.parameters.topic  = pluck p, 'topic', null\n      argv                = pluck p, '_unknown', []\n      return show_help_for_topic_and_exit q, argv\n    when 'cat'\n      return show_cat_and_exit()\n  #---------------------------------------------------------------------------------------------------------\n  # Stage: External Commands\n  #.........................................................................................................\n  # External commands call a child process that is passed the remaing command line arguments, so those\n  # can be dealt with summarily.\n  #.........................................................................................................\n  q.stage             = 'external'\n  p                   = parse_argv [], { argv, stopAtFirstUnknown: true, }\n  argv                = pluck p, '_unknown', []\n  R.parameters.argv   = argv[ .. ]\n  ### TAINT derive list from settings ###\n  if q.cmd in [ 'psql', 'node', 'nodexh', ]\n    return q\n  return @_signal R, 'help_and_exit', 13, \"^mixa@13^ Unknown command #{CND.reverse rpr q.cmd}\"\n\n"
  ]
}