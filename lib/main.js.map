{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MIXA'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n@types                    = require './types'\n{ isa\n  validate\n  validate_optional\n  cast\n  type_of }               = @types.export()\n# CP                        = require 'child_process'\n# defer                     = setImmediate\nparse_argv                = require 'command-line-args'\nmisfit                    = Symbol 'misfit'\n# relpath                   = PATH.relative process.cwd(), __filename\n{ freeze\n  lets }                  = require 'letsfreezethat'\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\npluck = ( d, name, fallback = misfit ) ->\n  R = d[ name ]\n  delete d[ name ]\n  unless R?\n    return fallback unless fallback is misfit\n    throw new Error \"^cli@5477^ no such attribute: #{rpr name}\"\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\nas_list_of_flags = ( flags ) ->\n  R = []\n  return R unless flags?\n  for k, v of flags\n    v.name = k\n    R.push v\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\ndefaults = freeze {\n  meta:\n    help:   { alias: 'h', type: Boolean, description: \"show help and exit\", }\n    cd:     { alias: 'd', type: String,  description: \"change to directory before running command\", }\n  commands:\n    help:\n      description:  \"show help and exit\"\n      flags:\n        topic:  { type: String, defaultOption: true, }\n\n    'cats!':\n      description:  \"draw cats!\"\n      flags:\n        color:  { alias: 'c', type: Boolean, description: \"whether to use color\", }\n    version:  { description: \"show project version and exit\", }\n  }\n\n#-----------------------------------------------------------------------------------------------------------\nE =\n  OK:             0\n  MISSING_CMD:    10\n  UNKNOWN_CMD:    11\n  HAS_NAME:       12\n  NEEDS_VALUE:    13\n  UNKNOWN_FLAG:   14\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@_compile_settings = ( settings ) ->\n  meta      = []\n  commands  = {}\n  R         = { meta, commands, }\n  usr       = { meta: ( settings?.meta ? null ), commands: ( settings?.commands ? null ), }\n  #.........................................................................................................\n  for name, description of Object.assign {}, defaults.meta, usr.meta\n    if description.name?\n      ### TAINT do not throw error, return sad value ###\n      throw Error \"^cli@5587^ must not have attribute 'name', got #{rpr description}\"\n    meta.push lets description, ( d ) -> d.name = name\n  #.........................................................................................................\n  for name, description of Object.assign {}, defaults.commands, usr.commands\n    if description.name?\n      ### TAINT do not throw error, return sad value ###\n      throw Error \"^cli@5588^ must not have attribute 'name', got #{rpr description}\"\n    is_external = false\n    e = lets description, ( d ) ->\n      d.name      = name\n      is_external = pluck d, 'external', false\n      d.flags     = as_list_of_flags d.flags\n    commands[ name ] = e\n  #.........................................................................................................\n  return freeze R\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@_signal = ( R, cmd, tag = 'OK', message = null ) ->\n  validate.nonempty_text          cmd\n  validate.nonempty_text          tag\n  if tag is 'OK'\n    validate.null message\n  else\n    validate.nonempty_text message\n    code            = E[ tag ] ? '111'\n    R.error         = { code, tag, message, }\n    R[ @types.sad ] = true\n  R.cmd = cmd\n  return R\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@parse = ( settings, argv = null ) ->\n  validate.mixa_settings settings\n  return freeze @_parse ( @_compile_settings settings ), argv\n\n#-----------------------------------------------------------------------------------------------------------\n@_parse = ( me, argv = null ) ->\n  #---------------------------------------------------------------------------------------------------------\n  R = {}\n  #---------------------------------------------------------------------------------------------------------\n  # Stage: Metaflags\n  #.........................................................................................................\n  argv    = argv ? process.argv\n  d       = me.meta\n  s       = { argv, stopAtFirstUnknown: true, }\n  p       = parse_argv d, s\n  argv    = pluck p, '_unknown', []\n  help    = pluck p, 'help',  false\n  #.........................................................................................................\n  if p.hasOwnProperty 'cd'\n    unless p.cd?\n      return @_signal R, 'help', 'NEEDS_VALUE', \"must give target directory when using --dd, -d\"\n    R.cd = pluck p, 'cd', null\n  #.........................................................................................................\n  if help\n    return @_signal R, 'help', 'OK'\n  #.........................................................................................................\n  if ( flag = argv[ 0 ] )?.startsWith '-'\n    return @_signal R, 'help', 'UNKNOWN_FLAG', \"unknown flag #{rpr flag}\"\n  #---------------------------------------------------------------------------------------------------------\n  # Stage: Commands\n  #.........................................................................................................\n  d       = { name: 'cmd', defaultOption: true, }\n  p       = parse_argv d, { argv, stopAtFirstUnknown: true, }\n  cmd     = pluck p, 'cmd', null\n  unless cmd?\n    return @_signal R, 'help', 'MISSING_CMD', \"missing command\"\n  argv    = pluck p, '_unknown', []\n  # urge '^33344^', me\n  # urge '^33344^', cmd\n  cmddef  = me.commands[ cmd ] ? null\n  unless cmddef?\n    return @_signal R, 'help', 'UNKNOWN_CMD', \"unknown command #{rpr cmd}\"\n  if cmddef.flags?\n    p                   = parse_argv cmddef.flags, { argv, stopAtFirstUnknown: true, }\n    R.argv              = pluck p, '_unknown', []\n    R.parameters        = p\n  #.........................................................................................................\n  return @_signal R, cmd, 'OK'\n\n"
  ]
}