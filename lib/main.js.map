{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MIXA'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n@runners                  = require './runners'\n@types                    = require './types'\n{ isa\n  validate\n  validate_optional\n  cast\n  type_of }               = @types.export()\n# CP                        = require 'child_process'\n# defer                     = setImmediate\nparse_argv                = require 'command-line-args'\nmisfit                    = Symbol 'misfit'\n# relpath                   = PATH.relative process.cwd(), __filename\n{ freeze\n  thaw\n  lets }                  = require 'letsfreezethat'\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\npluck = ( d, name, fallback = misfit ) ->\n  R = d[ name ]\n  delete d[ name ]\n  unless R?\n    return fallback unless fallback is misfit\n    throw new Error \"^cli@5477^ no such attribute: #{rpr name}\"\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\ndefaults = freeze {\n  meta:\n    help:   { alias: 'h', type: Boolean, description: \"show help and exit\", }\n    cd:     { alias: 'd', type: String,  description: \"change to directory before running command\", }\n  commands:\n    help:\n      description:  \"show help and exit\"\n      flags:\n        topic:  { type: String, defaultOption: true, }\n\n    'cats!':\n      description:  \"draw cats!\"\n      flags:\n        color:  { alias: 'c', type: Boolean, description: \"whether to use color\", }\n    version:  { description: \"show project version and exit\", }\n  }\n\n#-----------------------------------------------------------------------------------------------------------\nE =\n  OK:               0\n  MISSING_CMD:      10\n  UNKNOWN_CMD:      11\n  HAS_NAME:         12\n  NEEDS_VALUE:      13\n  UNKNOWN_FLAG:     14\n  EXTRA_FLAGS:      15\n  OTHER:            16\n  ILLEGAL_SETTINGS: 17\n  UNKNOWN:          18\n\n#-----------------------------------------------------------------------------------------------------------\nas_list_of_flags = ( flags ) ->\n  R = []\n  return R unless flags?\n  for k, v of thaw flags\n    v.name = k\n    #.......................................................................................................\n    if v.multiple?\n      switch v.multiple\n        when false\n          null\n        when 'lazy'\n          v.lazyMultiple = true\n          delete v.multiple\n        when 'greedy'\n          v.multiple = true\n    #.......................................................................................................\n    if v.fallback?\n      v.defaultValue = v.fallback\n      delete v.fallback\n    #.......................................................................................................\n    if v.positional?\n      v.defaultOption = v.positional\n      delete v.positional\n    R.push v\n  return R\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@_compile_jobdef = ( jobdef ) ->\n  ### TAINT simplify this with next version of InterType:\n  return new Error report if ( report = @types.xxxxxxx.mixa_jobdef jobdef )?\n  or similar, as the case may be ###\n  # validate.mixa_jobdef jobdef\n  unless isa.mixa_jobdef jobdef\n    aspect = @types._get_unsatisfied_aspect 'mixa_jobdef', jobdef\n    return @_signal {}, 'help', 'ILLEGAL_SETTINGS', \"not a valid mixa_jobdef object: violates #{rpr aspect}\"\n  meta      = []\n  commands  = {}\n  R         = { commands, }\n  usr       = { meta: ( jobdef?.meta ? null ), commands: ( jobdef?.commands ? null ), }\n  #.........................................................................................................\n  R.meta = as_list_of_flags Object.assign {}, defaults.meta, usr.meta\n  #.........................................................................................................\n  for name, description of Object.assign {}, defaults.commands, usr.commands\n    e = lets description, ( d ) ->\n      d.name          = name\n      d.flags         = as_list_of_flags d.flags\n      d.allow_extra  ?= false\n      return null\n    commands[ name ] = e\n  #.........................................................................................................\n  return R\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@_signal = ( R, cmd, tag = 'OK', message = null ) ->\n  validate.nonempty_text          cmd\n  validate.nonempty_text          tag\n  if tag is 'OK'\n    validate.null message\n  else\n    validate.nonempty_text message\n    code            = E[ tag ] ? '111'\n    R.error         = { code, tag, message, }\n    R[ @types.sad ] = true\n    # debug '^4443^', R\n  R.cmd = cmd\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_split_on_inhibitor = ( argv ) ->\n  return { argv,                  post: [],                 } if ( idx = argv.indexOf '--' ) < 0\n  return { argv: argv[ ... idx ], post: argv[ idx + 1 .. ], }\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@parse = ( jobdef, argv = null ) ->\n  argv    = argv ? process.argv\n  R       = { jobdef, input: argv, }\n  cjobdef = @_compile_jobdef jobdef\n  if @types.is_sad cjobdef\n    R.verdict = cjobdef\n    return R\n  R.verdict = @_parse cjobdef, argv\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_parse = ( me, argv ) ->\n  #---------------------------------------------------------------------------------------------------------\n  # Stage: Metaflags\n  #.........................................................................................................\n  R         = {}\n  d         = me.meta\n  { argv\n    post }  = @_split_on_inhibitor argv\n  # debug '^33736^', { argv, post, }\n  ### TAINT use method to do parse_argv w/ error handling, return happy/sad values ###\n  try p = parse_argv d, { argv, stopAtFirstUnknown: true, } catch error\n    return @_signal R, 'help', 'OTHER', error.message\n  argv    = pluck p, '_unknown', []\n  help    = pluck p, 'help',  false\n  #.........................................................................................................\n  if p.hasOwnProperty 'cd'\n    unless p.cd?\n      return @_signal R, 'help', 'NEEDS_VALUE', \"must give target directory when using --dd, -d\"\n    R.cd = pluck p, 'cd', null\n  #.........................................................................................................\n  if help\n    return @_signal R, 'help', 'OK'\n  #.........................................................................................................\n  if ( flag = argv[ 0 ] )?.startsWith '-'\n    return @_signal R, 'help', 'UNKNOWN_FLAG', \"unknown flag #{rpr flag}\"\n  #---------------------------------------------------------------------------------------------------------\n  # Stage: Commands\n  #.........................................................................................................\n  d       = { name: 'cmd', defaultOption: true, }\n  ### TAINT use method to do parse_argv w/ error handling, return happy/sad values ###\n  try p = parse_argv d, { argv, stopAtFirstUnknown: true, } catch error\n    return @_signal R, 'help', 'OTHER', error.message\n  cmd     = pluck p, 'cmd', null\n  unless cmd?\n    return @_signal R, 'help', 'MISSING_CMD', \"missing command\"\n  argv    = pluck p, '_unknown', []\n  cmddef  = me.commands[ cmd ] ? null\n  unless cmddef?\n    return @_signal R, 'help', 'UNKNOWN_CMD', \"unknown command #{rpr cmd}\"\n  if cmddef.flags?\n    ### TAINT use method to do parse_argv w/ error handling, return happy/sad values ###\n    try p = parse_argv cmddef.flags, { argv, stopAtFirstUnknown: true, } catch error\n      return @_signal R, 'help', 'OTHER', error.message\n    R.argv              = ( pluck p, '_unknown', [] ).concat post\n    R.parameters        = p\n  else\n    R.argv              = post\n  #.........................................................................................................\n  # ### Remove all percent-escaped initial hyphens: ###\n  # ( R.argv[ idx ] = d.replace /^%-/, '-' ) for d, idx in R.argv\n  #.........................................................................................................\n  if ( not cmddef.allow_extra ) and R.argv.length > 0\n    return @_signal R, 'help', 'EXTRA_FLAGS', \"command #{rpr cmd} does not allow extra, got #{rpr R.argv}\"\n  R.plus    = plus    if ( plus   = cmddef.plus               )?\n  R.runner  = runner  if ( runner = cmddef.runner ? me.runner )?\n  return @_signal R, cmd, 'OK'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@run = ( jobdef, argv = null ) ->\n  if @types.is_sad ( R = @parse jobdef, argv ).verdict\n    return @runners.help R\n  return R unless ( runner = R.verdict.runner )?\n  ### TAINT ensure this is an object of type `result` (`{ ?ok: any, ?error: any }`) ###\n  opath     = process.cwd()\n  process.chdir R.verdict.cd if R.verdict.cd?\n  debug '^2338^', process.cwd()\n  R.output  = runner R\n  process.chdir opath\n  if @types.is_sad R.output\n    return @runners.help R\n  return R\n  # return await R.runner R\n\n\n"
  ]
}