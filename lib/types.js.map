{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/types.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MIXA/TYPES'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\njr                        = JSON.stringify\nIntertype                 = ( require 'intertype' ).Intertype\nintertype                 = new Intertype module.exports\nL                         = @\n\n#-----------------------------------------------------------------------------------------------------------\nhas_only_keys = ( x, keys ) ->\n  for k of x\n    continue if k in keys\n    # urge '^227266^', \"has key #{rpr k}: #{rpr x}\"\n    return false\n  return true\n\n#-----------------------------------------------------------------------------------------------------------\n@declare 'mixa_jobdef', tests:\n  \"x is an object\":                         ( x ) -> @isa.object x\n  \"x.?meta is a mixa_flagdefs\":             ( x ) -> @isa_optional.mixa_flagdefs  x.meta\n  \"x.?commands is a mixa_cmddefs\":          ( x ) -> @isa_optional.mixa_cmddefs   x.commands\n  \"x has only keys 'meta', 'commands'\":     ( x ) -> has_only_keys x, [ 'meta', 'commands', ]\n\n#-----------------------------------------------------------------------------------------------------------\n@declare 'mixa_flagdefs', tests:\n  \"x is an object of mixa_flagdef\":         ( x ) -> @isa_object_of 'mixa_flagdef', x\n\n#-----------------------------------------------------------------------------------------------------------\n@declare 'mixa_cmddefs', tests:\n  \"x is an object of mixa_cmddef\":          ( x ) -> @isa_object_of 'mixa_cmddef', x\n\n#-----------------------------------------------------------------------------------------------------------\n@declare 'mixa_flagdef', tests:\n  \"x is an object\":                         ( x ) -> @isa.object x\n  #.........................................................................................................\n  # # These options are filled out by `mixa` or used by `command-line-args` in incompatible ways:\n  # \"x.name is not set\":                      ( x ) -> not x.name?\n  # \"x.group is not set\":                     ( x ) -> not x.group?\n  # \"x.defaultOption is not set\":             ( x ) -> not x.defaultOption?\n  # \"x.?lazyMultiple is not set\":             ( x ) -> not x.lazyMultiple?\n  #.........................................................................................................\n  \"x.?type is a function\":                  ( x ) -> @isa_optional.function       x.type\n  \"x.?alias is a text\":                     ( x ) -> @isa_optional.text           x.alias\n  \"x.?description is a text\":               ( x ) -> @isa_optional.text           x.description\n  \"x.?multiple is a _mixa_multiple\":        ( x ) -> @isa_optional._mixa_multiple x.multiple\n  \"x.?positional is a boolean\":             ( x ) -> @isa_optional.boolean        x.positional\n  \"x.?fallback is anything\":                ( x ) -> true\n  \"x has only keys 'type', 'alias', 'description', 'multiple', 'fallback', 'positional'\":     \\\n    ( x ) -> has_only_keys x, [ 'type', 'alias', 'description', 'multiple', 'fallback', 'positional', ]\n\n#-----------------------------------------------------------------------------------------------------------\n@declare '_mixa_multiple', tests:\n  \"x? is either false or 'lazy' or 'greedy'\": ( x ) -> x in [ null, false, 'greedy', 'lazy', ]\n\n#-----------------------------------------------------------------------------------------------------------\n@declare '_mixa_runnable', tests:\n  \"x is a sync or async function\": ( x ) -> ( @isa.function x ) or ( @isa.asyncfunction x )\n\n#-----------------------------------------------------------------------------------------------------------\n@declare 'mixa_cmddef', tests:\n  \"x is an object\":                         ( x ) -> @isa.object x\n  # \"x.name is not set\":                      ( x ) -> not x.name?\n  \"x.?description is a text\":               ( x ) -> @isa_optional.text           x.description\n  \"x.?allow_extra is a boolean\":            ( x ) -> @isa_optional.boolean        x.allow_extra\n  \"x.?flags is a mixa_flagdefs\":            ( x ) -> @isa_optional.mixa_flagdefs  x.flags\n  \"x.?runner is a _mixa_runnable\":          ( x ) -> @isa_optional._mixa_runnable x.runner\n  \"x.?plus is anything\":                    ( x ) -> true\n  \"x has only keys 'description', 'allow_extra', 'flags', 'runner', 'plus'\":     \\\n    ( x ) ->\n      debug '^33387^', ( k for k of x )\n      has_only_keys x, [ 'description', 'allow_extra', 'flags', 'runner', 'plus', ]\n\n\n\n\n\n\n\n\n\n"
  ]
}