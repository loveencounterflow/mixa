{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/configurator.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'CONFIGURATOR'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntypes                     = require './types'\n{ isa\n  validate }              = types.export()\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nOSPATH                    = require 'ospath'\nTOML                      = require '@iarna/toml'\nFINDUP                    = require 'find-up'\nPKGDIR                    = require 'pkg-dir'\nmerge                     = require 'lodash.merge'\n\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'mixacfg_cfg', tests:\n  \"@isa.object x\":                      ( x ) -> @isa.object x\n  \"@isa.nonempty_text x.module_home\":   ( x ) -> @isa.nonempty_text x.module_home\n  \"@isa.nonempty_text x.module_name\":   ( x ) -> @isa.nonempty_text x.module_name\n  \"@isa.nonempty_text x.start_path\":    ( x ) -> @isa.nonempty_text x.start_path\n\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_cfg_search_paths = ( cfg ) ->\n  R           = new Set()\n  path        = FINDUP.sync cfg.cfg_name, { cwd: cfg.start_path, }; R.add path if path?\n  path        = PATH.join OSPATH.home(), cfg.cfg_name;              R.add path if FINDUP.sync.exists path\n  return [ R..., ]\n\n#-----------------------------------------------------------------------------------------------------------\n@read_cfg = ( cfg ) ->\n  cfg = { {}..., cfg..., }\n  unless cfg.start_path?\n    unless ( cfg.start_path = ( CND.get_caller_info 2 )?.route ? null )?\n      throw new Error \"^mixa/configurator@1^ unable to resolve module\"\n  cfg.module_home  ?= PKGDIR.sync   cfg.start_path\n  cfg.module_name  ?= PATH.basename cfg.module_home\n  cfg.cfg_name     ?= \".#{cfg.module_name}.toml\"\n  validate.mixacfg_cfg cfg\n  #.........................................................................................................\n  # debug '^443538^', ( require 'util' ).inspect cfg\n  R                 = { $: cfg, }\n  search_paths      = @_get_cfg_search_paths cfg\n  cfg.search_path   = search_paths.join ':' ### TAINT not valid on Windows ###\n  cfg.found_paths   = []\n  #.........................................................................................................\n  for route, route_idx in search_paths\n    try\n      partial_cfg = TOML.parse FS.readFileSync route\n    catch error\n      throw error unless error.code is 'ENOENT'\n      warn \"^cfg@1^ no such file: #{rpr path}, skipping\"\n      continue\n    cfg.found_paths.push route\n    # partial_cfg   = flatten partial_cfg, { delimiter: '.', safe: true, }\n    R = merge R, partial_cfg\n  return R\n\n\n\n\n\n\n\n\n\n\n\n\n"
  ]
}