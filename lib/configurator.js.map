{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/configurator.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'CONFIGURATOR'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntypes                     = require './types'\n{ isa\n  validate }              = types.export()\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nflatten                   = require 'flat'\nOSPATH                    = require 'ospath'\nTOML                      = require '@iarna/toml'\nFINDUP                    = require 'find-up'\nPKGDIR                    = require 'pkg-dir'\n\n#-----------------------------------------------------------------------------------------------------------\n@get_cfg_search_path = ( start_path ) ->\n  module_home = PKGDIR.sync start_path\n  module_name = PATH.basename module_home\n  filename    = \".#{module_name}.toml\"\n  R           = new Set()\n  path        = FINDUP.sync filename, { cwd: start_path, };     R.add path if path?\n  path        = PATH.join OSPATH.home(), filename;              R.add path if FINDUP.sync.exists path\n  return [ R..., ]\n\n#-----------------------------------------------------------------------------------------------------------\n@read_cfg = ( start_path = null ) ->\n  unless start_path?\n    unless ( start_path = ( CND.get_caller_info 2 )?.route ? null )?\n      throw new Error \"^mixa/configurator@1^ unable to resolve module\"\n  else\n    validate.nonempty_text start_path\n  R = { $routes: [], }\n  for route, route_idx in @get_cfg_search_path start_path\n    try\n      partial_cfg = TOML.parse FS.readFileSync route\n    catch error\n      throw error unless error.code is 'ENOENT'\n      warn \"^cfg@1^ no such file: #{rpr path}, skipping\"\n      continue\n    R.$routes.push route\n    partial_cfg   = flatten partial_cfg, { delimiter: '.', safe: true, }\n    R             = { R..., partial_cfg..., }\n  return R\n\n\n\n\n\n\n\n\n\n\n\n\n"
  ]
}