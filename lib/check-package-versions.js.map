{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/check-package-versions.coffee"
  ],
  "names": [],
  "mappings": "AAEA;EAAA;AAAA,MAAA,GAAA,EAAA,MAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAd5B;;;EAgBA,MAAA,GAA4B,OAAA,CAAQ,QAAR,EAhB5B;;;EAmBA,MAAM,CAAC,OAAP,GAAiB,QAAA,CAAE,qBAAF,CAAA;AACjB,QAAA,KAAA,EAAA,OAAA,EAAA,SAAA,EAAA,YAAA,EAAA,GAAA,EAAA;IAAE,SAAA,GAAc;AACd;IAAA,KAAA,mBAAA;;AACE;QAAI,CAAA,CAAE,OAAF,CAAA,GAAe,OAAA,CAAQ,CAAA,CAAA,CAAG,YAAH,CAAA,aAAA,CAAR,CAAf,EAAJ;OAA0D,cAAA;QAAM;QAC9D,IAAmB,KAAK,CAAC,IAAN,KAAc,kBAAjC;UAAA,MAAM,MAAN;;QACA,SAAS,CAAC,IAAV,CAAe,CAAA,CAAA,CAAG,YAAH,CAAA,CAAA,CAAA,CAAmB,OAAnB,CAAA,gBAAA,CAAf;AACA,iBAHwD;;MAI1D,KAAO,MAAM,CAAC,SAAP,CAAiB,OAAjB,EAA0B,OAA1B,CAAP;QACE,SAAS,CAAC,IAAV,CAAe,CAAA,CAAA,CAAG,YAAH,CAAA,CAAA,CAAA,CAAmB,OAAnB,CAAA,IAAA,CAAA,CAAiC,OAAjC,CAAA,CAAA,CAAf;QACA,IAAA,CAAK,0BAAL,EAAiC,GAAG,CAAC,OAAJ,CAC/B,CAAA,WAAA,CAAA,CAAc,YAAd,CAAA,WAAA,CAAA,CAAwC,GAAA,CAAI,OAAJ,CAAxC,CAAA,MAAA,CAAA,CAA4D,GAAA,CAAI,OAAJ,CAA5D,CAAA,CAD+B,CAAjC,EAFF;;IALF;IASA,IAAe,SAAS,CAAC,MAAV,KAAoB,CAAnC;AAAA,aAAO,KAAP;;IACA,MAAM,IAAI,KAAJ,CAAU,kFAAA,GACd,SAAS,CAAC,IAAV,CAAe,IAAf,CADI;AAEN,WAAO;EAdQ;AAnBjB",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MIXA/VERSION-CHECKER'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nSEMVER                    = require 'semver'\n\n#===========================================================================================================\nmodule.exports = ( packages_and_versions ) ->\n  offenders   = []\n  for package_name, matcher of packages_and_versions.dependencies\n    try { version, } = require \"#{package_name}/package.json\" catch error\n      throw error unless error.code is 'MODULE_NOT_FOUND'\n      offenders.push \"#{package_name}@#{version} (not installed)\"\n      continue\n    unless SEMVER.satisfies version, matcher\n      offenders.push \"#{package_name}@#{version} (‚âÅ #{matcher})\"\n      warn '^mixa/version-checker@1^', CND.reverse \\\n        \"version of #{package_name} pinned at #{rpr matcher}, got #{rpr version}\"\n  return null if offenders.length is 0\n  throw new Error \"^mixa/version-checker@2^ the following packages do not have a matching version: \" + \\\n    offenders.join ', '\n  return null\n\n\n"
  ]
}