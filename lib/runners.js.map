{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/runners.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MIXA/RUNNERS'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nCP                        = require 'child_process'\ntypes                     = require './types'\n{ isa\n  validate\n  validate_optional\n  cast\n  type_of }               = types.export()\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@help = ( parse ) ->\n  info '^233387^', \"======== display help text here ==========\"\n  whisper '^233387^', parse\n\n#-----------------------------------------------------------------------------------------------------------\n@execSync = ( parse ) ->\n  { jobdef\n    verdict } = parse\n  executable  = verdict.plus?.executable ? jobdef.executable ? verdict.cmd\n  validate.nonempty_text executable\n  argv        = verdict.argv        ? []\n  ### TAINT escape command string; would be better to use array but not possible? ###\n  command     = \"#{executable} #{argv.join ' '}\"\n  settings    =\n    cwd:          verdict.cd ? process.cwd()\n    encoding:     'utf-8'\n  parameters  = verdict.parameters  ? null\n  if parameters? and ( keys = Object.keys parameters ).length > 0\n    ### TAINT apply parameters to CP settings? ###\n    ### TAINT don't throw error, return sad result ###\n    throw new Error \"^33667^ don't know parameters #{rpr parameters}\"\n  info '^233387^', \"======== execSync ==========\"\n  whisper '^233387^', parse\n  info '^233387^', { executable, argv, cwd: settings.cwd, parameters, }\n  try R = CP.execSync command, settings catch error\n    ### TAINT don't throw error, return sad result ###\n    throw error\n  return R\n\n\n\n\n"
  ]
}