{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/runners.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MIXA/RUNNERS'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nCP                        = require 'child_process'\ntypes                     = require './types'\n{ isa\n  validate\n  sad     }               = types.export()\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@help = ( parse ) ->\n  if types.isa.function show_help = parse.jobdef?.commands?.help?.runner\n    echo()\n    echo()\n    show_help()\n    echo()\n  else\n    info '^233387^', \"no help command configured\"\n  exit_on_error = parse.jobdef.exit_on_error ? true\n  # whisper '^233387^', parse\n  if ( error = parse.verdict.error      ) ? null then stage = 'input'\n  else if ( error = parse.output.error  ) ? null then stage = 'output'\n  if error?\n    ### TAINT use `_signal()` to derive defaults ###\n    code    = error.code ? 18\n    tag     = error.tag  ? 'UNKNOWN'\n    message = error.message ? \"an unspecified error occurred\"\n    warn '^mixa/runners/help@4457^', \"tag: #{tag}, code: #{code}, stage: #{rpr stage}\"\n    warn '^mixa/runners/help@4457^', CND.reverse \" #{message} \"\n    process.exit code if exit_on_error\n  return parse\n\n#-----------------------------------------------------------------------------------------------------------\n@execSync = ( parse ) ->\n  { jobdef\n    verdict } = parse\n  executable  = verdict.plus?.executable ? jobdef.executable ? verdict.cmd\n  validate.nonempty_text executable\n  argv        = verdict.argv        ? []\n  ### TAINT make escaping of arguments configurable? ###\n  args        = CND.shellescape argv\n  # args        = argv.join ' '\n  command     = \"#{executable} #{args}\"\n  settings    =\n    cwd:          verdict.cd ? process.cwd()\n    encoding:     'utf-8'\n  parameters  = verdict.parameters  ? null\n  if parameters? and ( keys = Object.keys parameters ).length > 0\n    ### TAINT apply parameters to CP settings? ###\n    ### TAINT don't throw error, return sad result ###\n    throw new Error \"^33667^ don't know parameters #{rpr parameters}\"\n  info '^233387^', \"======== execSync ==========\"\n  whisper '^233387^', parse\n  ### TAINT make this info part of result ###\n  info '^233387^', { executable, argv, cwd: settings.cwd, parameters, command, }\n  try ok = CP.execSync command, settings catch error\n    ### TAINT don't throw error, return sad result ###\n    return { error: { code: 16, tag: 'UNKNOWN', message: error.message, }, command, [sad]: true, }\n  return { ok, command, }\n\n\n\n\n"
  ]
}